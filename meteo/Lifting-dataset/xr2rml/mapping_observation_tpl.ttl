@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix weo: <http://ns.inria.fr/meteo/ontology/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix time: <http://www.w3.org/2006/time#>. 
@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix wep: <http://ns.inria.fr/meteo/ontology/property/> .

#Template file: replace placeholders
#- {{collection}}: the MongoDB collection to query, e.g. synop_observations_2021


# sea level pressure
<#pmer_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
    xrr:query """db.{{collection}}.find({"pmer": {$ne: "mq"}})"""; 
    xrr:format xrr:JSON 
    ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/pmer";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/seaLevelPressure>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.pmer";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
    ].

# air temperatures
<#temp_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.{{collection}}.find({"t": {$ne: "mq"}})"""; 
        xrr:format xrr:JSON;
     ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/t";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/airTemperature>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];   
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.t";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
            ]; 
    ].

# dew point temperature

<#dewPoint_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"td": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/td";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/dewPointTemperature>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [  
            xrr:reference "$.td";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
            ]; 
    ].

# air humidity

<#humidity_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"u": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/u";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/airRelativeHumidity>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.u";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
    ].

# horizontal visibility

<#hvisibility_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"vv": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/vv";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/horizontalVisibility>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/ground>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.vv";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
    ].

# differential pressure 3h

<#tend_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tend": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/tend";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/differentialPressure>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];

    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [ 
            xrr:reference "$.tend";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].




<#tendObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tend": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime";
    rr:class weo:Interval3h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime_endTime";
            rr:termType rr:BlankNode;
          ];
     ] .

<#tendObservation_PT_end>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tend": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime_endTime";
    rr:class time:Instant ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:inXSDDateTimeStamp;
          rr:objectMap [
            xrr:reference "$.date";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTimeStamp;
          ];
     ] .

# wind average speed

<#ff_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"ff": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/ff";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/windAverageSpeed>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/wind>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [   
            xrr:reference "$.ff";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].



<#ffObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"ff": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime";
    rr:class weo:Interval10m;
    rr:termType rr:BlankNode;
    ];

     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime_endTime";
            rr:termType rr:BlankNode;
          ];
     ] 
     .
<#tendObservation_FF_end>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"ff": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime_endTime";
    rr:class time:Instant ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:inXSDDateTimeStamp;
          rr:objectMap [
            xrr:reference "$.date";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTimeStamp;
          ];
     ] .

# wind direction 

<#dd_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"dd": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/dd";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/windAverageDirection>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/wind>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.dd";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/dd_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].


<#ddObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"dd": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/dd_PhenomenonTime";
    rr:class weo:Interval10m;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .

# state ground
<#etatsol_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.{{collection}}.find({"etat_sol": {$ne: "mq"}})"""; 
        xrr:format xrr:JSON;  
    ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/etat_sol";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/stateGround>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/ground>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "http://ns.inria.fr/meteo/vocab/wmocode/0901/{$.etat_sol}";
            rr:termType rr:IRI;
        ]; 
].

# cover cloud

<#nebulosite_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"n": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/n";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/totalCloudCover>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/cloud>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.n";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
    ].

# low cloud cover
<#nebulositecloud1_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"nbas": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/nbas";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/lowCloudCover>;
            rr:termType rr:IRI;
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/cloud>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.nbas";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
    ].


# differential pressure 24h 

<#tend24_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tend24": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/tend24";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/differentialPressure>;
            rr:termType rr:IRI;
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            
            xrr:reference "$.tend24";
            rr:termType rr:Literal;
            rr:datatype xsd:int;

        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#tend24ObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tend24": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_PhenomenonTime";
    rr:class weo:Interval24h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .


# Cloud Base Altitude
<#hauteurbase_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"hbas": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/hbas";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/cloudBaseAltitude>;
            rr:termType rr:IRI;
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/cloud>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.hbas";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
    ].

# cumulative precipitations 24h
<#rr24_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"rr24": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/rr24";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/precipitationAmount>;
            rr:termType rr:IRI;
        ];
    ];
     rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/precipitation>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
           xrr:reference "$.rr24";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/rr24_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].


<#rr24ObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"rr24": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/rr24_PhenomenonTime";
    rr:class weo:Interval24h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .

# station pressure
<#pressure_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"pres": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/pres";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/stationPressure>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.pres";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
        ]; 
    ].

# gust speed
<#raf10_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.{{collection}}.find({"raf10": {$ne: "mq"}})"""];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/raf10";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/gustSpeed>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/gust>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];   
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            
            xrr:reference "$.raf10";
            rr:termType rr:Literal;
            rr:datatype xsd:double;

        ]; 
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/raf10_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#raf10ObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"raf10": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/raf10_PhenomenonTime";
    rr:class weo:Interval10m ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .

# min soil temperature 
<#tminsol_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.{{collection}}.find({"tminsol": {$ne: "mq"}})"""];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/tminsol";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/minSoilTemperature>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/ground>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];   
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            
            xrr:reference "$.tminsol";
            rr:termType rr:Literal;
            rr:datatype xsd:double;

        ]; 
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tminsol_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#tminsolObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"tminsol": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tminsol_PhenomenonTime";
    rr:class weo:Interval12h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .

# cover height 

<#CoverHeight_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"ht_neige": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/ht_neige";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/totalCoverHeight>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/ground>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            xrr:reference "$.ht_neige";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
    ].

# pressure tendency
<#tendency_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.{{collection}}.find({"code_tend": {$ne: "mq"}})"""; 
        xrr:format xrr:JSON;  
    ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/code_tend";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/pressureTendency>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/air>;
            rr:termType rr:IRI;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "http://ns.inria.fr/meteo/vocab/wmocode/0200/{$.code_tend}";
            rr:termType rr:IRI;
        ]; 
].

# cumulative precipitation 3 h 
<#rr3_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.{{collection}}.find({"rr3": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/rr3";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # weather observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/weatherproperty/precipitationAmount>;
            rr:termType rr:IRI;
        ];
    ];
    # meteorological feature of interest
     rr:predicateObjectMap [
        rr:predicate sosa:hasFeatureOfInterest;
        rr:objectMap [ 
            rr:constant <http://ns.inria.fr/meteo/vocab/meteorologicalfeature/precipitation>;
            rr:termType rr:IRI;
        ];
    ];


    rr:predicateObjectMap [
        rr:predicate wep:madeByStation;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
           xrr:reference "$.rr3";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/rr3_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].


<#rr3_ObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.{{collection}}.find({"rr3": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/rr3_PhenomenonTime";
    rr:class weo:Interval3h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .