@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix weo: <http://ns.inria.fr/meteo/ontology/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix time: <http://www.w3.org/2006/time#>. 
@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .

<#pmer_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
    xrr:query """db.SynopWeatherData2.find({"pmer": {$ne: "mq"}})"""; 
    xrr:format xrr:JSON 
    ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/pmer";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/seaLevelPressure>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/pmer_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#pmerObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"pmer": {$ne: "mq"}})""";
    xrr:format xrr:JSON;
    ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/pmer_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.pmer";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/PA>;
            rr:term rr:IRI;
          ];
    ]
    .
<#temp_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.SynopWeatherData2.find({"t": {$ne: "mq"}})"""; 
        xrr:format xrr:JSON;
     ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/t";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/temperature>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];   
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/t_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#tempObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"t": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/t_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.t";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/K>;
            rr:term rr:IRI;
          ];
    ]
    .

<#pointrose_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"td": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/td";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/dewPoint>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/td_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#pointroseObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"td": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/td_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.td";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/K>;
            rr:term rr:IRI;
          ];
    ]
    .

<#humidity_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"u": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/u";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/humidity>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/u_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#humidityObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"u": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/u_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.u";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/PERCENT>;
            rr:term rr:IRI;
          ];
    ]
    .

<#hvisibility_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"vv": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/vv";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/horizontalVisibility>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/vv_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#hvisibilityObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"vv": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/vv_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.vv";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/M>;
            rr:term rr:IRI;
          ];
    ]
    .


<#tend_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/tend";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/differentialPressure>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];

    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend_Result";
            rr:termType rr:BlankNode;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#tendObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/tend_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.tend";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/PA>;
            rr:term rr:IRI;
          ];
    ].


<#tendObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tend_PhenomenonTime";
    rr:class weo:Interval3h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .


<#ff_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"ff": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/ff";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/windAverageSpeed>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/ff_Result";
            rr:termType rr:BlankNode;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#ffObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"ff": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/ff_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.ff";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/M-PER-SEC>;
            rr:term rr:IRI;
          ];
    ].


<#ffObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"ff": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/ff_PhenomenonTime";
    rr:class weo:Interval10min;
    rr:termType rr:BlankNode;
    ];

     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] 
     .


<#dd_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"dd": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/dd";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/windAverageDirection>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/dd_Result";
            rr:termType rr:BlankNode;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/dd_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#ddObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"dd": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/dd_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.dd";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/DEG>;
            rr:term rr:IRI;
          ];
    ].


<#ddObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"dd": {$ne: "mq"}})""" ];

   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/dd_PhenomenonTime";
    rr:class weo:Interval10min;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .

<#etatsol_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ 
        xrr:query """db.SynopWeatherData2.find({"etat_sol": {$ne: "mq"}})"""; 
        xrr:format xrr:JSON;  
    ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/etat_sol";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/stateGround>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            rr:template "http://ns.inria.fr/meteo/ontology/weatherpropery/wmocode/0901/{$.etat_sol}";
            rr:termType rr:IRI;
        ]; 
].

<#nebulosite_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"n": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/n";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/totalCloudCover>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/n_Result";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#nebulositeObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"n": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/n_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.n";
            rr:termType rr:Literal;
            rr:datatype xsd:double;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/PERCENT>;
            rr:term rr:IRI;
          ];
    ]
    .

<#tend24_Observation>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend24": {$ne: "mq"}})""" ];
    
    rr:subjectMap [
        rr:template "http://ns.inria.fr/meteo/observation/obs_at_{$.date}_{$.numer_sta}/tend24";
        rr:class weo:MeteorologicalObservation;
    ];
    
    # observable property
    rr:predicateObjectMap [
        rr:predicate sosa:observedProperty;
        rr:objectMap [ 
            rr:constant <weo:property/differentialPressure>;
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate weo:isMadeBy;
        rr:objectMap [ 
            rr:template "http://ns.inria.fr/meteo/weatherstation/{$.numer_sta}";
            rr:termType rr:IRI;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [ 
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:hasResult;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_Result";
            rr:termType rr:BlankNode;
        ]; 
];
   rr:predicateObjectMap [
     rr:predicate sosa:phenomenonTime;
        rr:objectMap [
            rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_PhenomenonTime";
            rr:termType rr:BlankNode;
        ]; 
    ].

<#tend24ObservationResult>
    a rr:TriplesMap;
    xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend24": {$ne: "mq"}})""" ];

    rr:subjectMap [
        rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_Result";
        rr:class qudt:QuantityValue;
        rr:termType rr:BlankNode;
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:numericValue;
          rr:objectMap [
            xrr:reference "$.tend24";
            rr:termType rr:Literal;
            rr:datatype xsd:int;
          ];
    ];
    rr:predicateObjectMap [
        rr:predicate qudt:unit;
          rr:objectMap [
            rr:constant <http://qudt.org/vocab/unit/PA>;
            rr:term rr:IRI;
          ];
    ].


<#tend24ObservationPT>
  a rr:TriplesMap;
   xrr:logicalSource [ xrr:query """db.SynopWeatherData2.find({"tend24": {$ne: "mq"}})""" ];
   rr:subjectMap [
    rr:template "obs_at_{$.date}_{$.numer_sta}/tend24_PhenomenonTime";
    rr:class weo:Interval24h ;
    rr:termType rr:BlankNode;
    ];
     rr:predicateObjectMap [
        rr:predicate time:hasEnd;
          rr:objectMap [
            xrr:reference "$.dateF";
            rr:termType rr:Literal;
            rr:datatype xsd:dateTime;
          ];
     ] .
